theta.hat <- 1000 # rough initial estimate of dispersion
#x <- model.matrix(~ RIX, data=colData)
x = matrix(rep(1, n))
niter=5
for (i in 1:niter) {
param <- cbind(theta.hat, ase_sums_comp)
#param <- cbind(theta.hat, ase_tots_comp[,1:n])
fit.mle <- apeglm(Y=mat_comp, x=x, log.lik=NULL, param=param,
no.shrink=TRUE, log.link=FALSE, method="betabinCR")
theta.hat <- bbEstDisp(success=mat_comp, size=ase_sums_comp,
x=x, beta=fit.mle$map,
minDisp=.01, maxDisp=5000)
}
coef <- 1
#xlab <- "mean of total counts"
#plot(rowMeans(ase_sums_comp), fit.mle$map[,1], log="x", xlab=xlab, ylab="log odds")
mle <- cbind(fit.mle$map[,coef], fit.mle$sd[,coef])
param <- cbind(theta.hat, ase_sums_comp)
fit2 <- apeglm(Y=mat_comp, x=x, log.lik=NULL, param=param,
coef=coef, mle=mle, threshold=0.7,
log.link=FALSE, method="betabinCR")
#ylim <- c(-1,1.5)
s.val <- svalue(fit2$thresh) # small-or-false-sign value
#cols <- ifelse(s.val < .01, "red", "black")
#plot(rowMeans(ase_sums_comp), fit2$map[,coef], main="apeglm",
#     log="x", xlab=xlab, ylab="log odds", col=cols, ylim=ylim)
#abline(h=0,col=rgb(1,0,0,.5))
fit2$map = cbind(fit2$map, abs(fit2$map[,coef]))
fit2$map = fit2$map[order(fit2$map[,coef+1], decreasing = T),]
return(fit2)
}
for(x in c(6:10)){
fit2_list[[x]] = runAPEASE(x, data_kmers_list)
}
head(fit2_list[[1]]$map)
fit2_list[[1]]$map[which(fit2_list[[1]]$map[,2] > 0.35),]
lapply(fit2_list, function(x) x$map[which(x$map[,2] > 0.35),]
)
lapply(fit2_list, function(x) x$map[which(x$map[,2] > 0.30),])
logit(0.3)
logit(0.6)
logit(0.7)
lapply(fit2_list, function(x) x$map[which(x$map[,2] > 0.8473),])
logit(0.35)
logit(0.30)
logit(0.25)
logit(0.25)
lapply(fit2_list, function(x) x$map[which(x$map[,2] > 0.619),])
lapply(fit2_list, function(x) x$map[which(x$map[,2] > 0.619),])
unique(unlist(lapply(lapply(fit2_list, function(x) x$map[which(x$map[,2] > 0.619),]), rownames)))
unique(unlist(lapply(lapply(fit2_list, function(x) x$map[which(x$map[,2] > logit(0.35)),]), rownames)))
logit(0.35)
unique(unlist(lapply(lapply(fit2_list, function(x) x$map[which(x$map[,2] > abs(logit(0.35))),]), rownames)))
logit(0.65)
unique(unlist(lapply(lapply(fit2_list, function(x) x$map[which(x$map[,2] > logit(0.65)),]), rownames)))
sig_genes = unique(unlist(lapply(lapply(fit2_list, function(x) x$map[which(x$map[,2] > logit(0.65)),]), rownames)))
which(sig_genes %in% ie_genes$mgi_symbol)
which(!sig_genes %in% ie_genes$mgi_symbol)
(data_kmers=data_kmers_list
niter=1000
data_kmers=data_kmers_list
niter=1000
n.thin=5
save_dir=NULL
STZ=T
use_gene=F
no_theta=F
alpha=NULL
stan=F
stanMod = "ase_mu_g_regr.stan"
reg <- list()
unique(data_kmers$RRIX))
sort(unique(data_kmers$RRIX))
unique(data_kmers$RRIX)
data_kmers=data_kmers_list
names(data_kmers)
length(data_kmers)
data_kmers_list_df = do.call("rbind",data_kmers_list)
data_kmers=data_kmers_list_df
unique(data_kmers$RRIX)
i=1
testPups <- as.vector(t(data_kmers %>% ungroup() %>%
filter(RRIX == i) %>%            #, !Pup.ID %in% problemPups
dplyr::select("Pup.ID") %>% distinct()))
testPups
testData <- data_kmers %>% filter(Pup.ID %in% testPups)
chr = unique(testData$seq.Chromosome)
terms <- c("dir", "Diet", "DietRIX","RRIX", "PODIETRIX")
terms=NULL
length(which(!levels(testData$DietRIX) %in% testData$DietRIX)) > 0
encoded <- unique(getEncoding(testData, terms = unique(c(terms,"Pup.ID","seq.Gene"))))
head(encoded, n=20)
tail(encoded)
#,"pup_gene"
reg[[paste0("rix_",i)]] = list()
df=testData
mu_g0=0.5
t20=0.001
nchains=2
iter=niter
stanMod
terms
stanMod = "ase_beta_binom_disperse.stan"
terms = toupper(terms)
colnames(df) <- toupper(colnames(df))
if(is.null(encoded)){
encoded <- unique(getEncoding(df, terms = unique(c(terms,"PUP.ID","SEQ.GENE","PUP_GENE"))))
}
df$PUP.ID <- factor(df$PUP.ID, encoded$Level[which(encoded$Variable == "PUP.ID")])
#data$RIX_DIR_DIET = paste(data$RRIX, data$DIR, data$DIET, sep="_")
df %>% ungroup() %>% arrange(PUP.ID) -> df
df %>% dplyr::select(one_of("PUP.ID")) %>%
left_join(data.frame(PUP.ID = unique(df$PUP.ID),
INDP = seq(1:length(unique(df$PUP.ID)))), by="PUP.ID") %>%
distinct() -> merge_indP
df %>%
dplyr::select(one_of("SEQ.GENE","PUP.ID")) %>%
distinct() %>%
ungroup() %>%
mutate(INDG=seq(n())) -> merge_indG
merge_indG$indP = as.numeric(merge_indG$PUP.ID)
df %>% group_by(PUP.ID, SEQ.GENE) %>%
mutate(indK=seq(n())) %>%
group_by(PUP.ID) %>%
left_join(merge_indP, by = c("PUP.ID")) %>%
left_join(merge_indG, by = c("SEQ.GENE", "PUP.ID")) %>%
dplyr::select(-one_of(toupper(c("seq.ProbeSeq", "seq.TranscriptID", "seq.end5", "seq.end3", "seq.consensus",
"seq.Chromosome", "seq.Position", "seq.refseq", "seq.altseq", "seq.alt", "seq.ref")))) %>%
arrange(PUP.ID, SEQ.GENE) %>%
ungroup() -> df
df %>% group_by(SEQ.GENE, PUP.ID, RECIPROCAL) %>%
summarize(sum_CC_1 = sum(CC_1), sum_CC_2 = sum(CC_2), sumTot = sum(SUM)) %>%
arrange(PUP.ID, SEQ.GENE) %>%
left_join(merge_indP, by="PUP.ID") %>%
left_join(merge_indG, by = c("SEQ.GENE", "PUP.ID")) -> gene_tot
if(use_gene){
y_gk = gene_tot$sum_CC_1
N_gk = gene_tot$sumTot
indG = gene_tot$INDG
indP = gene_tot$INDP
indPO = gene_tot$RECIPROCAL
df = gene_tot
} else {
y_gk <- df$CC_1
N_gk <- df$SUM
indG <- df$INDG
indP =  df$INDP
}
length(y_gk)
head(y_gk)
head(N_gk)
length(N_gl)
length(N_gk)
length(indG)
length(indP)
length(indPO)
head(indG)
head(indP)
nGP = length(unique(df$INDG))
nP <- length(unique(df$PUP.ID))
nG <- length(unique(df$SEQ.GENE))
if("RECIPROCAL" %in% colnames(df)) df$DIR <- gsub("[0-9]", "",df$RECIPROCAL)
df$PO <- ifelse(df$DIR == "a", 0.5, -0.5)
head( df$PO)
N
N
mu_0 <- mean(y_gk/N_gk)
tau_0 <- 1/var(y_gk/N_gk)
indP    = model.matrix(~ 0 + PUP.ID, df)     # + DietRIX
head(df)
head(test_dat)
head(data_kmers_list[[1]])
tail(data_kmers_list[[1]])
stanMod = "ase_beta_binom_disperse.stan"
indP    = model.matrix(~ 0 + PUP.ID, df)     # + DietRIX
indG    = model.matrix(~ 0 + SEQ.GENE, df)     # + DietRIX
head(df)
testPups
head(testData)
dim(testData)
df=testData
terms = toupper(terms)
colnames(df) <- toupper(colnames(df))
colnames(df)
terms
factor(df$PUP.ID, encoded$Level[which(encoded$Variable == "PUP.ID")])
head(df$PUP.ID)
head(encoded$Level[which(encoded$Variable == "PUP.ID")])
head(encoded)
head(factor(df$PUP.ID, encoded$Level[which(toupper(encoded$Variable) == "PUP.ID")]))
df$PUP.ID <- factor(df$PUP.ID, encoded$Level[which(toupper(encoded$Variable) == "PUP.ID")])
#data$RIX_DIR_DIET = paste(data$RRIX, data$DIR, data$DIET, sep="_")
df %>% ungroup() %>% arrange(PUP.ID) -> df
df %>% dplyr::select(one_of("PUP.ID")) %>%
left_join(data.frame(PUP.ID = unique(df$PUP.ID),
INDP = seq(1:length(unique(df$PUP.ID)))), by="PUP.ID") %>%
distinct() -> merge_indP
df %>%
dplyr::select(one_of("SEQ.GENE","PUP.ID")) %>%
distinct() %>%
ungroup() %>%
mutate(INDG=seq(n())) -> merge_indG
merge_indG$indP = as.numeric(merge_indG$PUP.ID)
df %>% group_by(PUP.ID, SEQ.GENE) %>%
mutate(indK=seq(n())) %>%
group_by(PUP.ID) %>%
left_join(merge_indP, by = c("PUP.ID")) %>%
left_join(merge_indG, by = c("SEQ.GENE", "PUP.ID")) %>%
dplyr::select(-one_of(toupper(c("seq.ProbeSeq", "seq.TranscriptID", "seq.end5", "seq.end3", "seq.consensus",
"seq.Chromosome", "seq.Position", "seq.refseq", "seq.altseq", "seq.alt", "seq.ref")))) %>%
arrange(PUP.ID, SEQ.GENE) %>%
ungroup() -> df
df %>% group_by(SEQ.GENE, PUP.ID, RECIPROCAL) %>%
summarize(sum_CC_1 = sum(CC_1), sum_CC_2 = sum(CC_2), sumTot = sum(SUM)) %>%
arrange(PUP.ID, SEQ.GENE) %>%
left_join(merge_indP, by="PUP.ID") %>%
left_join(merge_indG, by = c("SEQ.GENE", "PUP.ID")) -> gene_tot
use_gene
use_gene=T
use_gene=T
y_gk = gene_tot$sum_CC_1
N_gk = gene_tot$sumTot
indG = gene_tot$INDG
indP = gene_tot$INDP
indPO = gene_tot$RECIPROCAL
df = gene_tot
length(y_gk)
head(y_gk)
head(N_gk)
length(indG)
head(indG)
head(indP)
length(indP)
indPO = gene_tot$RECIPROCAL
head(indPO)
unique(indPO)
df = gene_tot
nGP = length(unique(df$INDG))
nP <- length(unique(df$PUP.ID))
nG <- length(unique(df$SEQ.GENE))
if("RECIPROCAL" %in% colnames(df)) df$DIR <- gsub("[0-9]", "",df$RECIPROCAL)
"RECIPROCAL" %in% colnames(df)
df$PO <- ifelse(df$DIR == "a", 0.5, -0.5)
mu_0 <- mean(y_gk/N_gk)
tau_0 <- 1/var(y_gk/N_gk)
indP    = model.matrix(~ 0 + PUP.ID, df)     # + DietRIX
indG    = model.matrix(~ 0 + SEQ.GENE, df)     # + DietRIX
#indRIX  = model.matrix(~ 0 + RIX, df)     # + DietRIX
indGP   = model.matrix(~ 0 + PUP_GENE, df)     # + DietRIX
indDiet = model.matrix(~ 0 + DIET, df)     # + DietRIX
nDiet   = ncol(indDiet)
C_diet  = as.matrix(get(paste0("C_diet_",nDiet)))
XC      = indDiet %*% C_diet
indDR   = model.matrix(~ 0 + DIETRIX, df)     # + DietRIX
indP    = model.matrix(~ 0 + PUP.ID, df)     # + DietRIX
indG    = model.matrix(~ 0 + SEQ.GENE, df)     # + DietRIX
#indRIX  = model.matrix(~ 0 + RIX, df)     # + DietRIX
indGP   = model.matrix(~ 0 + PUP_GENE, df)     # + DietRIX
head(df)
df$PUP_GENE = paste(df$INDP,df$INDG, sep=".")
head(df$PUP_GENE)
#indRIX  = model.matrix(~ 0 + RIX, df)     # + DietRIX
indGP   = model.matrix(~ 0 + PUP_GENE, df)     # + DietRIX
head(df)
df$PUP_GENE = paste(df$INDP,df$INDG, sep="_")
head(df)
map_gp_p = model.matrix(~ 0 + PUP.ID, unique(df %>% select(SEQ.GENE, PUP.ID, PUP_GENE)))
#indRIX  = model.matrix(~ 0 + RIX, df)     # + DietRIX
indGP   = model.matrix(~ 0 + PUP_GENE, df)     # + DietRIX
map_gp_p = model.matrix(~ 0 + PUP.ID, unique(df %>% select(SEQ.GENE, PUP.ID, PUP_GENE)))
map_gp_g = model.matrix(~ 0 + SEQ.GENE, unique(df %>% select(SEQ.GENE, PUP.ID, PUP_GENE)))
map_g_gp = t(map_gp_g)
map_g_p = map_g_gp %*% map_gp_p
ind_SPO = (t(indGP)%*%as.matrix(df$PO,ncol=1))
#ind_SPO = (t(indGP)%*%as.matrix(df$PO,ncol=1))
#ind_SPO = unique(df %>% select(PUP_GENE, PO))$PO
ind_SPO = unique(df %>% select(PUP.ID, PO))$PO
head(1/rowSums(map_g_gp))
head(1/rowSums(map_g_p))
head(map_gp_g)
head(map_gp_p)
warmup=round((floor((iter*0.25)/(iter/10))*(iter/10)))
thin=max(iter/1000,1)
fileName <- stanMod
stan_code <- readChar(fileName, file.info(fileName)$size)
#cat(stan_code)
resStan = NULL
stan_code <- readChar(fileName, file.info(fileName)$size)
stan_code <- readChar(fileName, file.info(fileName)$size)
#cat(stan_code)
resStan = NULL
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
require(rstan)
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
standat <-  list(N           = length(y_gk),
y_gk        = y_gk,
N_gk        = N_gk,
nP          = nP,
indP        = indP,
nG          = nG,
indG        = indG,
nGP         = nGP,
indGP       = indGP,
map_gp_p    = map_gp_p,
map_gp_g    = map_gp_g,
map_g_p     = map_g_p,
map_g_gp    = map_g_gp,
weight_g    = 1/rowSums(map_g_gp),
weight_g_p  = 1/rowSums(map_g_p),
indSPO      = ind_SPO)
standat <-  list(N           = length(y_gk),
y_gk        = y_gk,
N_gk        = N_gk,
nP          = nP,
indP        = indP,
nG          = nG,
indG        = indG,
nGP         = nGP,
#indGP       = indGP,
map_gp_p    = map_gp_p,
map_gp_g    = map_gp_g,
map_g_p     = map_g_p,
map_g_gp    = map_g_gp,
weight_g    = 1/rowSums(map_g_gp),
weight_g_p  = 1/rowSums(map_g_p),
indSPO      = ind_SPO)
head(matrix(rep(1, length(y_gk)), ncol=1))
standat <-  list(N           = length(y_gk),
y           = y_gk,
W           = N_gk,
nP          = nP,
X           = matrix(rep(1, length(y_gk)), ncol=1),
#indP        = indP,
nG          = nG,
indG        = indG,
nGP         = nGP,
#indGP       = indGP,
map_gp_p    = map_gp_p,
map_gp_g    = map_gp_g,
map_g_p     = map_g_p,
map_g_gp    = map_g_gp,
weight_g    = 1/rowSums(map_g_gp),
weight_g_p  = 1/rowSums(map_g_p),
indSPO      = ind_SPO)
warmup=round((floor((iter*0.25)/(iter/10))*(iter/10)))
thin=max(iter/1000,1)
fileName <- stanMod
stan_code <- readChar(fileName, file.info(fileName)$size)
#cat(stan_code)
resStan = NULL
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
standat <-  list(N           = length(y_gk),
y           = y_gk,
W           = N_gk,
nP          = nP,
X           = matrix(rep(1, length(y_gk)), ncol=1),
#indP        = indP,
nG          = nG,
indG        = indG,
nGP         = nGP,
#indGP       = indGP,
map_gp_p    = map_gp_p,
map_gp_g    = map_gp_g,
map_g_p     = map_g_p,
map_g_gp    = map_g_gp,
weight_g    = 1/rowSums(map_g_gp),
weight_g_p  = 1/rowSums(map_g_p),
indSPO      = ind_SPO)
warmup=round((floor((iter*0.25)/(iter/10))*(iter/10)))
thin=max(iter/1000,1)
fileName <- stanMod
stan_code <- readChar(fileName, file.info(fileName)$size)
#cat(stan_code)
resStan = NULL
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
stanMod
stanMod = "ase_beta_binom_disperse_test.stan"
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
fileName <- stanMod
stan_code <- readChar(fileName, file.info(fileName)$size)
#cat(stan_code)
resStan = NULL
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
standat <-  list(N           = length(y_gk),
y           = y_gk,
W           = N_gk,
nP          = nP,
X           = matrix(rep(1, length(y_gk)), ncol=1),
#indP        = indP,
nG          = nG,
indG        = indG,
nGP         = nGP,
#indGP       = indGP,
map_gp_p    = map_gp_p,
map_gp_g    = map_gp_g,
map_g_p     = map_g_p,
map_g_gp    = map_g_gp,
weight_g    = 1/rowSums(map_g_gp),
weight_g_p  = 1/rowSums(map_g_p),
indSPO      = ind_SPO)
warmup=round((floor((iter*0.25)/(iter/10))*(iter/10)))
thin=max(iter/1000,1)
fileName <- stanMod
stan_code <- readChar(fileName, file.info(fileName)$size)
#cat(stan_code)
resStan = NULL
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
fileName <- "ase_beta_binom_disperse_test.stan"
stan_code <- readChar(fileName, file.info(fileName)$size)
#cat(stan_code)
resStan = NULL
try(resStan <- stan(model_code = stan_code, data = standat,
chains = nchains, iter = iter, warmup = warmup, thin = thin))
jagsdat <-  list(N       = length(y),
y       = y,
n       = N_gk,
nP      = nP,
X           = matrix(rep(1, length(y_gk)), ncol=1),
indP        = indP,
nG          = nG,
indG        = indG,
nGP         = nGP,
indSPO      = ind_SPO)
jagsModel <-"
model {
## sampling
for (i in 1:N){
y[i] ~ dbetabin(p_g[i]*theta, (1-p_g[i])*theta, n[i])
}
## priors
for(i in 1:N){
for (g in 1:nG){
p_g[indG[indP[i]]] ~ inv_logit(X[i,] %*% betas)
}
}
theta ~ dgamma(a_s, b_s)
betas ~ dcauchy(0, 10)
}
"
jagsdat <-  list(N       = length(y),
y       = y,
n       = N_gk,
nP      = nP,
X           = matrix(rep(1, length(y_gk)), ncol=1),
indP        = indP,
nG          = nG,
indG        = indG,
nGP         = nGP,
indSPO      = ind_SPO,
a_s = 10, b_s = 10)
jagsModel <-"
model {
## sampling
for (i in 1:N){
y[i] ~ dbetabin(p_g[i]*theta, (1-p_g[i])*theta, n[i])
}
## priors
for(i in 1:N){
for (g in 1:nG){
p_g[indG[indP[i]]] ~ inv_logit(X[i,] %*% betas)
}
}
theta ~ dgamma(a_s, b_s)
betas ~ dcauchy(0, 10)
}
"
jags <- jags.model(jagsModel, data = jagsDat)
library("rjags")
jags
jags
jags.model(jagsModel, data = jagsDat)
posterior <- run.jags(jagsModel,
n.chains = 1,
data = jagsDat,
monitor = c("p_g", "theta", "betas"),
adapt = 1000,
burnin = 5000,
sample = 5000)
library("runjags")
posterior <- run.jags(jagsModel,
n.chains = 1,
data = jagsDat,
monitor = c("p_g", "theta", "betas"),
adapt = 1000,
burnin = 5000,
sample = 5000)
posterior
print(posterior)
line_inits <- list(list("p_g" = 0.5, "betas"= 1, "theta" = 1))
jags <- jags.model(jagsModel, data = jagsDat, inits=inits, n.chains=2)
model <- jags.model(jagsModel, data = jagsDat, inits=inits, n.chains=2)
update(model, n.iter=1000)
line_inits <- list(list("p_g" = 0.5, "betas"= 1, "theta" = 1))
model <- jags.model(jagsModel, data = jagsDat, inits=inits, n.chains=2)
update(model, n.iter=5000)
samples <- coda.samples(model, variable.names=c("p_g", "theta", "betas"),
n.iter=5000)
samples
class(samples)
update(model, n.iter=5000)
samples <- coda.samples(model, variable.names=c("p_g", "theta", "betas"),
n.iter=5000)
samples
jagsModel
summary(samples)
