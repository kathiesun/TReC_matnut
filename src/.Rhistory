library(tidyverse)
remove.packages("dplyr")
install.packages("dplyr")
update.packages(c("glue","rlang","tidyselect","vctrs"))
install.packages("dplyr")
library(tidyverse)
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
library(tidyverse)
library(rstan)
setwd("C:/Users/Kathie/TReC_matnut/src")
source("lmer_functions_rna.R")
source("stan_pheno_functions.R")
#source("prediction_functions.R")
source("summary_functions.R")
library(dplyr)
library(ggplot2)
library(rstan)
library(edgeR)
library(DESeq2)
library(sva)
setwd("C:/Users/Kathie/TReC_matnut/src")
source("lmer_functions_rna.R")
source("stan_pheno_functions.R")
source("prediction_functions.R")
source("summary_functions.R")
###### Read in data
dir <- "C:/Users/Kathie/Dropbox\ (ValdarLab)"
#matnut <- readRDS(file.path(dir,'phenotype_analysis/matnut_data.rds'))
matnut = read.csv(file.path(dir,'matnut_main/AllMice_GeneExpression_SSupdated_11.27.19.csv'))
gene_count <- read.csv(file.path(dir,'/trec/gene_count_matrix.csv'))
colnames(gene_count)[1] = "gene_id"
gene_count$Gene.ID = do.call("rbind",(strsplit(as.character(gene_count$gene_id), "[|]")))[,1]
gene_count$Gene.Name = do.call("rbind", (strsplit(as.character(gene_count$gene_id), "[|]")))[,2]
samples = colnames(gene_count)[grep("Pup", colnames(gene_count))]
matnut$ID = paste0("Pup.ID_",matnut$Pup.ID)
matnut$Diet = gsub(" $", "", matnut$Diet)
matnut$Diet = factor(matnut$Diet, levels=c("Standard","Low Protein","Methyl Enriched","Vitamin D Deficient"))
matnut$RIX = gsub("a|b","",matnut$Reciprocal)
matnut$RIX = factor(matnut$RIX, levels=c(1:4,6:10))
matnut$PO = ifelse(gsub("[0-9]","",matnut$Reciprocal) == "a", 0.5, -0.5)
matnut$DietRIX = gsub(" ", ".",paste0(matnut$Diet, matnut$RIX))
levs = apply(expand.grid(gsub(" ",".",levels(matnut$Diet)), levels(matnut$RIX)),1,function(x) paste(x, collapse=""))
matnut$DietRIX = factor(matnut$DietRIX, levels = levs[which(levs%in%matnut$DietRIX)])
matnut$DietRIXPOq = paste0(matnut$DietRIX,"_",matnut$PO)
matnut$RIX = factor(matnut$RIX, levels = c(1:4,6:10))
map = read.csv(file.path(dir,"mini/combined_map_cs_gbrs_allmarkers_17mar2020.csv"))
encoded <- getEncoding(matnut, terms = c("RIX","Diet","DietRIX"))
gene_count = data.frame(gene_count[-which(duplicated(gene_count$Gene.Name)),])
rownames(gene_count) = gene_count$Gene.Name
counts = gene_count[, grep("Pup.ID", colnames(gene_count))]
t_counts = data.frame(t(gene_count %>% filter(Gene.Name %in% genes$V1) %>%
select(contains("Pup.ID"))))
tmp = gene_count$Gene.Name[which(gene_count$Gene.Name %in% genes$V1)]
tmp[46] = "Snhg14_v2"
colnames(t_counts) = tmp
t_counts$ID = unlist(as.character(rownames(t_counts)))
matnut_use = right_join(matnut, t_counts, "ID")
colData = matnut[match(colnames(counts),matnut$ID),c("Breeding.Batch","Behavior.Batch","RIX","Reciprocal","Diet",
"Dam.ID","ID","PO","DietRIX","DietRIXPOq")]
d0 <- DGEList(counts)
d0$samples = cbind(d0$samples, colData)
samplenames = d0$samples$ID
cpm0 <- cpm(d0)
lcpm0 <- cpm(d0, log=TRUE)
L <- mean(d0$samples$lib.size) * 1e-6
M <- median(d0$samples$lib.size) * 1e-6
c(L, M)
summary(lcpm0)
table(rowSums(d0$counts==0)==(ncol(d0$counts)))
keep.exprs <- filterByExpr(d0, group="Reciprocal")
d1 <- d0[keep.exprs,, keep.lib.sizes=FALSE]
dim(d0)
dim(d1)
d2 = d1[-grep("MSTRG", rownames(d1)),, keep.lib.sizes=FALSE]
dim(d2)
cutoff <- 1
drop <- which(apply(cpm(d2), 1, max) < cutoff)
d3 <- d2
if(length(drop) > 0) d3 <- d2[-drop,]
dim(d3)
lcpm.cutoff <- log2(10/M + 2/L)
library(RColorBrewer)
nsamples <- ncol(d0)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
plot(density(lcpm0[,1]), col=col[1], lwd=2, ylim=c(0,1.15), las=2, main="", xlab="")
title(main="A. Raw data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm0[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
#legend("topright", samplenames, text.col=col, bty="n")
lcpm <- cpm(d3, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
snames <- colnames(d3$counts) # Sample names
d3 <- calcNormFactors(d3)
############# RIX, diet, PO, and interactions model #############
RIX = colData$RIX
RRIX = d3$samples$RRIX
PO = d3$samples$PO
Diet = d3$samples$Diet
contrasts(RIX) = contr.sum(9)
contrasts(Diet) = contr.sum(4)
mm = model.matrix(~ 0 + RIX + Diet + PO:RIX)    #+ RIX:Diet
y <- voom(d3, mm, plot = T)
vfit = lmFit(y, mm)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean-variance trend")
summary(decideTests(efit,p.value=0.1))
voom_sig = which(unlist(apply(decideTests(efit,p.value=0.1), 1, function(x) any(x[grep("PO",colnames(efit))] != 0))))
##################  DESeq2  ##########################
colData = colData %>% arrange(RIX, Diet, PO)
RIX = colData$RIX
RRIX = colData$RIX
Diet = colData$Diet
PO = colData$PO
DietRIX = colData$DietRIX
contrasts(RIX) = contr.sum(9)
contrasts(RRIX) = contr.sum(9)
contrasts(Diet) = contr.sum(4)
contrasts(DietRIX) = contr.sum(length(unique(colData$DietRIX)))
mm = model.matrix(~ 0 + RIX + Diet + PO:RIX)
all.zero <- apply(mm, 2, function(x) all(x==0))
idx <- which(all.zero)
if(length(idx) > 0) mm <- mm[,-idx]
rownames(colData) = colData$ID
cts = counts[,match(colData$ID, colnames(counts))]
all(rownames(colData) == colnames(cts))
voom_sig
table(voom_sig)
table(names(voom_sig))
##################  DESeq2  ##########################
colData = colData %>% arrange(RIX, Diet, PO)
RIX = colData$RIX
RRIX = colData$RIX
Diet = colData$Diet
PO = colData$PO
DietRIX = colData$DietRIX
contrasts(RIX) = contr.sum(9)
contrasts(RRIX) = contr.sum(9)
contrasts(Diet) = contr.sum(4)
contrasts(DietRIX) = contr.sum(length(unique(colData$DietRIX)))
mm = model.matrix(~ 0 + RIX + Diet + PO:RIX)
mm
all.zero <- apply(mm, 2, function(x) all(x==0))
idx <- which(all.zero)
idx
rownames(colData) = colData$ID
cts = counts[,match(colData$ID, colnames(counts))]
all(rownames(colData) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = colData,
design = mm)
## pre-filtering
keep <- rowSums(counts(dds) >= 10) >= 10
dds <- dds[keep,]
remove = grep("MSTRG", rownames(counts(dds)))
if(length(remove) > 0) dds = dds[-remove,]
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
base = "RIX + Diet + PO:RIX"
dat = counts(dds, normalized=T)
dat = dat[rowMeans(dat) > 1,]
mod  <- model.matrix(as.formula(paste("~ 0 +", base)), colData(dds))
mod0 <- model.matrix(~   1                           , colData(dds))
svseq <- svaseq(dat, mod, mod0, n.sv = 1)
ddssva = dds
ddssva$SV1 <- svseq$sv[,1]
design(ddssva) <- as.formula(paste("~ 0 + SV1 +", base))
dim(colData$ddssva)
dds = ddssva
colData(ddssva)
dim(colData(ddssva))
dds = ddssva
dds <- DESeq(dds)
res <- results(dds)
PO_res = resultsNames(dds)[grep("PO", resultsNames(dds))]
POres_list = lapply(PO_res, function(x) results(dds, name = x))
POres_Ordered <- lapply(POres_list, function(x) x[order(x$pvalue),])
sig_genes_list = lapply(POres_Ordered, function(x) rownames(x)[which(x$padj < 0.1)])
sig_genes_short = lapply(sig_genes_list, function(x)
if(length(grep("Gm|Rik|[.]", x)) > 0) x[-grep("Gm|Rik|[.]", x)])
deseq_sig = sort(table(unlist(lapply(POres_Ordered, function(x) rownames(x[which(x$padj < 0.1),])))), decreasing = T)
ddsPlot = dds
sig_genes_short
length(deseq_sig)
dir
saveRDS(file.path(dir,"de_results/deseq_28dec2020.rds"))
saveRDS(dds, file.path(dir,"de_results/deseq_28dec2020.rds"))
deseq_sig
library(tidyverse)
library(rstan)
#setwd("C:/Users/Kathie/TReC_matnut/src")
setwd("~/TReC_matnut/src")
setwd("C:/Users/Kathie/TReC_matnut/src")
source("lmer_functions_rna.R")
source("stan_pheno_functions.R")
#source("prediction_functions.R")
source("summary_functions.R")
args <- commandArgs(trailingOnly = TRUE)
it = as.numeric(args[1])
###### Read in data
#dir <- "C:/Users/Kathie/Dropbox\ (ValdarLab)"
dir <- "/nas/depts/006/valdar-lab/users/sunk/"
dir <- "C:/Users/Kathie/Dropbox\ (ValdarLab)"
genes = names(deseq_sig)
genes
matnut = read.csv(file.path(dir,'matnut_main/AllMice_GeneExpression_SSupdated_11.27.19.csv'))
matnut = matnut %>% select(-contains("X"))
gene_count <- read.csv(file.path(dir,'/hisat2_stringtie_fasta/stringtie/round2/gene_count_matrix.csv'))
gene_count <- read.csv(file.path(dir,'/trec/gene_count_matrix.csv'))
colnames(gene_count)[1] = "gene_id"
gene_count$Gene.ID = do.call("rbind",(strsplit(as.character(gene_count$gene_id), "[|]")))[,1]
gene_count$Gene.Name = do.call("rbind", (strsplit(as.character(gene_count$gene_id), "[|]")))[,2]
samples = colnames(gene_count)[grep("Pup", colnames(gene_count))]
matnut$ID = paste0("Pup.ID_",matnut$Pup.ID)
matnut$Diet = gsub(" $", "", matnut$Diet)
matnut$Diet = factor(matnut$Diet, levels=c("Standard","Low Protein","Methyl Enriched","Vitamin D Deficient"))
matnut$RIX = gsub("a|b","",matnut$Reciprocal)
matnut$RIX = factor(matnut$RIX, levels=c(1:4,6:10))
matnut$PO = ifelse(gsub("[0-9]","",matnut$Reciprocal) == "a", 0.5, -0.5)
matnut$DietRIX = gsub(" ", ".",paste0(matnut$Diet, matnut$RIX))
levs = apply(expand.grid(gsub(" ",".",levels(matnut$Diet)), levels(matnut$RIX)),1,function(x) paste(x, collapse=""))
matnut$DietRIX = factor(matnut$DietRIX, levels = levs[which(levs%in%matnut$DietRIX)])
matnut$DietRIXPOq = paste0(matnut$DietRIX,"_",matnut$PO)
matnut$RIX = factor(matnut$RIX, levels = c(1:4,6:10))
map = read.csv(file.path(dir,"mini/combined_map_cs_gbrs_allmarkers_17mar2020.csv"))
encoded <- getEncoding(matnut, terms = c("RIX","Diet","DietRIX"))
annot = read.table(file.path(dir, "matnut_main/Mus_musculus.GRCm38.96.gtf"), skip=5, fill=T)
annot_genes = annot %>% filter(V15 == "gene_name") %>%
dplyr::select(one_of(paste0("V",c(1,4,5,7,10,16)))) %>%
distinct()
colnames(annot_genes) = c("Chr","Start","End","Strand","Gene.ID","Gene.Name")
annot_genes = annot_genes %>% mutate(Start = as.numeric(paste(Start)), End = as.numeric(paste(End)))
#
if(length(which(duplicated(annot_genes$Gene.Name))) > 0){
annot_genes = annot_genes[-which(duplicated(annot_genes$Gene.Name)),]
}
annot_genes = annot_genes[which(annot_genes$Gene.ID %in% gene_count$Gene.ID |annot_genes$Gene.Name %in% gene_count$Gene.Name),]
annot_genes = annot_genes %>% filter(Gene.Name %in% genes)
t_counts = data.frame(t(gene_count %>% filter(Gene.Name %in% annot_genes$Gene.Name) %>%
select(contains("Pup.ID"))))
tmp = gene_count$Gene.Name[which(gene_count$Gene.Name %in% annot_genes$Gene.Name)]
tmp[46] = "Snhg14_v2"
colnames(t_counts) = tmp
t_counts$ID = unlist(as.character(rownames(t_counts)))
matnut_use = right_join(matnut, t_counts, "ID")
dim(matnut_use)
dim(annot_genes)
head(annot_genes)
tail(annot_genes)
tail(annot_genes, n=100)
nrow(annot_genes)
genes
its_1
its_1=1
its_2=10
as.character(genes$V1)[its_1:its_2]
genes
as.character(genes)[its_1:its_2]
stanlist <- lapply(as.character(genes)[its_1:its_2], function(x)
stanSum(df=matnut_use, encoded=encoded, phenotype=x,
randvar=c("RIX", "DietRIX"), fixvar="Diet", POvar=c("RIX", "DietRIX"),
tryLam=c(-1, 0, .25, .33, .5, 1, 2, 3), normd=T,
chains=1, iter=2000)
)
names(stanlist) = as.character(genes)[its_1:its_2]
sig_genes_short
genes = unlist(lapply(sig_genes_short, function(x) x[1:5]))
genes
genes = unique(genes)
genes
genes  = genes[which(!is.na(genes))]
genes
its_1 = 1
its_2 = length(genes)
its_1
its_2
#its_1 = 1
#its_2 = length(genes)
stanlist <- lapply(as.character(genes)[its_1:its_2], function(x)
stanSum(df=matnut_use, encoded=encoded, phenotype=x,
randvar=c("RIX", "DietRIX"), fixvar="Diet", POvar=c("RIX", "DietRIX"),
tryLam=c(-1, 0, .25, .33, .5, 1, 2, 3), normd=T,
chains=1, iter=2000)
)
as.character(genes)[its_1:its_2]
x="mt-Tg"
#its_1 = 1
#its_2 = length(genes)
stanlist <- lapply(as.character(genes)[its_1:its_2], function(x)
stanSum(df=matnut_use, encoded=encoded, phenotype=x,
randvar=c("RIX", "DietRIX"), fixvar="Diet", POvar=c("RIX", "DietRIX"),
tryLam=c(-1, 0, .25, .33, .5, 1, 2, 3), normd=T,
chains=1, iter=2000)
)
annot_genes = annot %>% filter(V15 == "gene_name") %>%
dplyr::select(one_of(paste0("V",c(1,4,5,7,10,16)))) %>%
distinct()
colnames(annot_genes) = c("Chr","Start","End","Strand","Gene.ID","Gene.Name")
annot_genes = annot_genes %>% mutate(Start = as.numeric(paste(Start)), End = as.numeric(paste(End)))
#
if(length(which(duplicated(annot_genes$Gene.Name))) > 0){
annot_genes = annot_genes[-which(duplicated(annot_genes$Gene.Name)),]
}
annot_genes = annot_genes[which(annot_genes$Gene.ID %in% gene_count$Gene.ID |annot_genes$Gene.Name %in% gene_count$Gene.Name),]
annot_genes = annot_genes %>% filter(Gene.Name %in% genes)
genes
which(genes %in% annot_genes$Gene.Name)
which(genes %in% annot_genes$Gene.Name)
which(!genes %in% annot_genes$Gene.Name)
head(annot_genes)
tail(annot_genes)
tail(sort(annot_genes$Chr))
tail(sort(annot_genes$Chr), n=10)
table(annot_genes$Chr))
table(annot_genes$Chr)
t_counts = data.frame(t(gene_count %>% filter(Gene.Name %in% annot_genes$Gene.Name) %>%
select(contains("Pup.ID"))))
tmp = gene_count$Gene.Name[which(gene_count$Gene.Name %in% annot_genes$Gene.Name)]
tmp[46] = "Snhg14_v2"
colnames(t_counts) = tmp
t_counts$ID = unlist(as.character(rownames(t_counts)))
matnut_use = right_join(matnut, t_counts, "ID")
t_counts = data.frame(t(gene_count %>% filter(Gene.Name %in% annot_genes$Gene.Name) %>%
select(contains("Pup.ID"))))
tmp = gene_count$Gene.Name[which(gene_count$Gene.Name %in% annot_genes$Gene.Name)]
tmp[46] = "Snhg14_v2"
tmp = gene_count$Gene.Name[which(gene_count$Gene.Name %in% annot_genes$Gene.Name)]
tmp
#tmp[46] = "Snhg14_v2"
colnames(t_counts) = tmp
t_counts$ID = unlist(as.character(rownames(t_counts)))
matnut_use = right_join(matnut, t_counts, "ID")
colnames(matnut_use)
print(paste(its_1,its_2))
its_1 = 1
its_2 = length(genes)
#its_1 = 1
#its_2 = length(genes)
print(paste(its_1,its_2))
stanlist <- lapply(as.character(genes)[its_1:its_2], function(x)
stanSum(df=matnut_use, encoded=encoded, phenotype=x,
randvar=c("RIX", "DietRIX"), fixvar="Diet", POvar=c("RIX", "DietRIX"),
tryLam=c(-1, 0, .25, .33, .5, 1, 2, 3), normd=T,
chains=1, iter=2000)
)
encoded
as.character(genes)[its_1:its_2]
x=as.character(genes)[its_1:its_2][1]
x
matnut_use$`mt-Tg`
df=matnut_use
phenotype
phenotype=x
phenotype
randvar=c("RIX", "DietRIX")
fixvar="Diet"
POvar=c("RIX", "DietRIX")
normd=T
tryLam=c(-1, 0, .25, .33, .5, 1, 2, 3)
chains=1
iter=2000
matched_df <- list()
formulas = getFormulas(fixvar, randvar, POvar)
if(length(phenotype) > 1) {
use <- which(colSums(df[,colnames(df) %in% phenotype], na.rm = T) != 0)
use <- unique(c(use, which(apply(df[,colnames(df) %in% phenotype], 2, var) != 0) ))
phenotype <- phenotype[use]
}
y.mat <- data.frame(df[, phenotype])
df <- data.frame(df)
phenotype = ifelse(length(grep("^[0-9]",phenotype)>0), paste0("X",phenotype), phenotype)
colnames(y.mat) <- phenotype
bcObject <- BC.model(y.mat = y.mat, data=df, indvariable=formulas$lmerform,
transformParams = getMatnutTransformParams(tryLam = tryLam, normd = normd))
y.mat
formulas$lmerform
getMatnutTransformParams(tryLam = tryLam, normd = normd)
df
head(df)
matnut_use
gsub("[-]","[.]",colnames(matnut_use))
gsub("[-]",".",colnames(matnut_use))
colnames(matnut_use) = gsub("[-]",".",colnames(matnut_use))
stanlist <- lapply(as.character(genes)[its_1:its_2], function(x)
stanSum(df=matnut_use, encoded=encoded, phenotype=x,
randvar=c("RIX", "DietRIX"), fixvar="Diet", POvar=c("RIX", "DietRIX"),
tryLam=c(-1, 0, .25, .33, .5, 1, 2, 3), normd=T,
chains=1, iter=2000)
)
genes = gsub("[-]",".",genes)
genes
matnut_use
stanlist <- lapply(as.character(genes)[its_1:its_2], function(x)
stanSum(df=matnut_use, encoded=encoded, phenotype=x,
randvar=c("RIX", "DietRIX"), fixvar="Diet", POvar=c("RIX", "DietRIX"),
tryLam=c(-1, 0, .25, .33, .5, 1, 2, 3), normd=T,
chains=1, iter=2000)
)
library(Rtools)
Rversion
R.version
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("pkgbuild")
