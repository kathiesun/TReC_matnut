cut=seq(0, 1, by=0.05)
lapply(cut, function(x) censored.fit(res$pvalue, x, statistic="pvalue"))
hist(fdr$pval)
plotMA(res)
forest=F
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
n
r
r="1"
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],
"NA")
pval
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval) +
theme_bw() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
print(quad)
#print(p)
}
dev.off()
rma_test %>% filter(genes == "Trim14")
rma_test %>% filter(genes == "mt-Tg")
###########  metafor  ##############
#meta_PO_allgenes
meta_out_reml_abs <- lapply(all_genes, function(g){
#})
#meta_out = list()
#for(g in all_genes){
gene = rma_test %>% filter(genes == g) %>% arrange(rix)
if(length(which(!is.na(gene$log2FoldChange))) > 0){
rma(yi = abs(gene$log2FoldChange),vi=gene$lfcSE,
method="REML", verbose=F, control=list(stepadj=0.5,maxiter=1000))
} else {
NA
}
#meta_out
})
#names(meta_out) = names(meta_out_reml) =
names(meta_out_reml_abs) = all_genes
perm_test_all = lapply(meta_out_reml, function(x) permutest(x))
outmat_relm_abs <- do.call("rbind", lapply(meta_out_reml_abs, function(x) x[c("b","se","pval","ci.lb","ci.ub","tau2","se.tau2")]))
outmat_relm_abs = as.data.frame(outmat_relm_abs)
outmat_relm_abs$genes = all_genes
outmat_relm_abs = outmat_relm_abs %>% left_join(baseMean_comb[,c("genes","means")], by="genes")
fdr <- fdrtool(unlist(outmat_relm_abs$pval), statistic="pvalue", plot=T)
#fdr_b <- fdrtool(unlist(outmat_relm_abs$b), statistic="normal", plot=T)
outmat_relm_abs$pval_raw = outmat_relm_abs$pval
#outmat_relm_abs$pval_b = fdr$pval
outmat_relm_abs$pval = fdr$pval
#outmat_relm_abs$padj_b  <- p.adjust(outmat_relm_abs$pval, method = "BH")
outmat_relm_abs$padj  <- p.adjust(outmat_relm_abs$pval, method = "BH")
outmat_relm_abs %>% filter(genes %in% keep_genes,
!is.na(b), !is.na(se.tau2), !is.na(means),
padj < 0.1) %>%
mutate(pval = as.numeric(pval)) %>%
arrange(pval) -> outmat_relm_abs_sig
#if(length(grep("Gm|Rik", outmat_relm_abs_sig$genes)) > 0){
#  outmat_relm_abs_sig = outmat_relm_abs_sig[-grep("Gm|Rik", outmat_relm_abs_sig$genes),]
#}
head(outmat_relm_abs_sig)
##############  fisher  ##################
pcomb = sapply(names(rem_seg_res$res_PO),
function(x){
tmp = cbind(rix = x,
genes = rownames(rem_seg_res$res_PO[[x]]),
praw = as.numeric(rem_seg_res$res_PO[[x]][,c("pval_raw")]),
pval = as.numeric(rem_seg_res$res_PO[[x]][,c("pvalue")]))
if(ncol(tmp) > 1) tmp
})
pcomb = data.frame(do.call("rbind",pcomb))
pcomb$praw = as.numeric(paste(pcomb$praw))
pcomb$pval = as.numeric(paste(pcomb$pval))
pcomb$rix = factor(pcomb$rix, levels=paste0("rix",c(1:4,6:10)))
all_genes = unique(pcomb$genes)
length(which(all_genes %in% keep_genes))
pmat = lapply(keep_genes, function(g){
test = pcomb %>% filter(genes == g)
stat_raw = -2*sum(log(test$praw))
stat_adj = -2*sum(log(test$pval))
data.frame(stat_raw, stat_adj, g)
})
pmat=do.call("rbind",pmat)
hist(pmat$stat_raw, breaks=96)
#y = dchisq(x=seq(0,200,by=0.1), df = 2*9)
#plot(dchisq(x=seq(0,200,by=0.1), df = 18), type="l", col="blue")
curve(dchisq(x, df = length(pcomb)*2)*nrow(pmat), from=0, to=150, col="blue", add=T)
pmat$padj = pchisq(pmat$stat_adj, df=length(pcomb)*2,lower.tail = F)
pmat$praw = pchisq(pmat$stat_raw, df=length(pcomb)*2,lower.tail = F)
fdr = fdrtool(x = pmat$padj, statistic = "pvalue")
pmat$padj_qval = fdr$qval
pmat$padj_fdr = fdr$pval
fdr = fdrtool(x = pmat$praw, statistic = "pvalue")
pmat$praw_qval = fdr$qval
pmat$praw_fdr = fdr$pval
pmat$padj_bh = p.adjust(pmat$padj_fdr, method = "BH")
pmat$praw_bh = p.adjust(pmat$praw_fdr, method = "BH")
## compare with sum_mat_clean
pmat_sig = pmat %>% filter(g %in% all_genes, praw_bh < 0.05) %>% arrange(padj_qval)
## 1697, 1140 w/o Gm|Rik|[.]
plot_genes = pmat_sig$g[-grep("Gm|[.]|Rik",pmat_sig$g)][1:20]
which(pmat_sig$g == "Gprasp1")
#write.csv(pmat_sig, file.path(dir, "de_results/combined_VDD_STD_sigif_genes_14nov2019.csv"))
##############  stouffer  #################
zstar = zedst = c()
for(g in keep_genes){
tg = test_mat %>% filter(genes == g)
if(nrow(tg) == 9){
tg$weights = sqrt(tg$n)
tg$weights = 1 / tg$lfcSE
zstar[g] = sum(apply(tg,1,function(x) abs(as.numeric(x["weights"])*as.numeric(x["stat"])))) / sqrt(sum(tg$weights^2))
zedst[g] = sum(apply(tg,1,function(x) abs(as.numeric(x["weights"])*as.numeric(x["zed"])))) / sqrt(sum(tg$weights^2))
}
}
hist(zstar)
lines(dnorm(x=seq(-5,5,by=0.1),0,1), type="l", col="blue")
hist(zedst)
lines(dnorm(x=seq(-5,5,by=0.1),0,1), type="l", col="blue")
fzstar = folded(zstar)
folded <- function(y) {
## y is a vector with positive data
n <- length(y)  ## sample size
sy2 <- sum(y^2)
sam <- function(para, n, sy2) {
me <- para[1]   ;   se <- exp( para[2] )
f <-  - n/2 * log(2/pi/se) + n * me^2 / 2 / se +
sy2 / 2 / se - sum( log( cosh( me * y/se ) ) )
f
}
mod <- optim( c( mean(y), sd(y) ), n = n, sy2 = sy2, sam, control = list(maxit = 2000) )
mod <- optim( mod$par, sam, n = n, sy2 = sy2, control = list(maxit = 20000) )
result <- c( -mod$value, mod$par[1], exp(mod$par[2]) )
names(result) <- c("log-likelihood", "mu", "sigma squared")
result
}
###################  permute  ####################
pups = gsub("Pup.ID_","",colnames(countData))
rixes = unique(samples_use$RRIX)[order(unique(samples_use$RRIX))]
diff_lst <- list()
for(r in rixes){
use_pups = pups[which(pups %in% samples_use$Pup.ID[which(samples_use$RRIX == r)])]
pups_a = use_pups[which(use_pups %in% samples_use$Pup.ID[which(samples_use$PO_cat == "a")])]
pups_b = use_pups[which(use_pups %in% samples_use$Pup.ID[which(samples_use$PO_cat == "b")])]
pups_a = paste0("Pup.ID_", pups_a)
pups_b = paste0("Pup.ID_", pups_b)
N = min(length(pups_a), length(pups_b))
rand = cbind(sample(1:length(pups_a), N, replace=F), sample(1:length(pups_b), N, replace=F))
diff <- sapply(1:N, function(n){
countData[,pups_a[rand[n,1]]] - countData[,pups_b[rand[n,2]]]
})
colnames(diff) = paste0("rix", r,"_",1:N)
diff_lst[[paste0("rix",r)]] = diff
}
rix_means <- do.call("cbind", lapply(diff_lst, function(x) apply(x, 1, mean)^2))
rix_vars <- do.call("cbind", lapply(diff_lst, function(x) apply(x, 1, var)^2))
ignore <- apply(rix_vars, 1, function(x) ifelse(length(which(x == 0)) > 0, T, F))
rix_weights <- do.call("cbind", lapply(diff_lst, function(x) apply(x, 1, length)))
rix_weights <- t(apply(rix_weights, 1, function(x) x/sum(x)))
rix_means <- rix_means[-which(ignore),]
rix_vars <- rix_vars[-which(ignore),]
rix_weights <- rix_weights[-which(ignore),]
rix_meta <- sapply(1:nrow(rix_means), function(x){
data = cbind(means = as.numeric(rix_means[x,]), rix = colnames(rix_means))
#lm(~ data[,"rix"], data=data.frame(data), weights=rix_weights[x,])
rma(yi = rix_means[x,], vi=rix_vars[x,], weights = rix_weights[x,],
method="EB", verbose=F, control=list(stepadj=0.5,maxiter=1000))
}, simplify=F)
outmat_rix_meta <- do.call("rbind", lapply(rix_meta, function(x) x[c("b","se","pval","ci.lb","ci.ub","tau2","se.tau2")]))
outmat_rix_meta = as.data.frame(outmat_rix_meta)
outmat_rix_meta$gene = rownames(rix_means)
outmat_rix_meta %>% filter(pval < 0.05)
diff_set <- t(apply(diff_set, 1, function(x) x + abs(min(x))+1))
colData = cbind(samples=colnames(diff_set), rix=unlist(strsplit(colnames(diff_set),"_"))[c(T,F)])
dds = DESeqDataSetFromMatrix(countData = diff_set, colData = colData,
design = ~ rix)
DESeq(dds)
###############   PCA   ################
cleanY = function(y, mod, svs) {
X = cbind(mod, svs)
Hat = solve(t(X) %*% X) %*% t(X)
beta = (Hat %*% t(y))
rm(Hat)
gc()
P = ncol(mod)
return(y - t(as.matrix(X[,-c(1:P)]) %*% beta[-c(1:P),]))
}
cleaned_RIX_1 <- cleanY(countData_use, mod, svseq$sv)
colData_use$SV1 = svseq$sv[,1]
### nvm this was a bad idea
vsd_string <- lapply(dds_string, function(x) vst(x, blind=FALSE))
pcaData = lapply(vsd_string, function(x) plotPCA(x, intgroup=c("PO","Diet"), returnData=T))
pdf(file.path(dir,"figures_and_updates/string_PCA_by_rix_4outs_rem.pdf"))
for(i in 1:length(pcaData)){
percentVar <- round(100 * attr(pcaData[[i]], "percentVar"))
pcaData[[i]]$PO = as.factor(pcaData[[i]]$PO)
PC_means = pcaData[[i]] %>% group_by(Diet, PO) %>% summarize(med1=median(PC1), med2=median(PC2))
pcaData[[i]]$far = sapply(1:nrow(pcaData[[i]]), function(d){
x = ifelse(abs(pcaData[[i]]$PC1[d] -
PC_means$med1[which(PC_means$Diet == pcaData[[i]]$Diet[d] & PC_means$PO == pcaData[[i]]$PO[d])]) >
sd(PC_means$med1)*5, T, F)
y = ifelse(abs(pcaData[[i]]$PC2[d] -
PC_means$med2[which(PC_means$Diet == pcaData[[i]]$Diet[d] & PC_means$PO == pcaData[[i]]$PO[d])]) >
sd(PC_means$med2)*5, T, F)
any(x,y)
})
p = ggplot(pcaData[[i]], aes(PC1, PC2, color=Diet, shape=PO)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() +
theme_bw() +
geom_label_repel(aes(label=ifelse(far,name,'')),
#(x>-0.15 & x<0 & y>-0.2 & y<0.2 & (RIX %in% c(2,3)))
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
ggtitle(paste("PCA of",names(pcaData)[i]))
print(p)
}
dev.off()
###############   SVA   ################
library(sva)
dat_lst = lapply(dds_string, function(x) counts(x, normalized=T))
dat_lst  <- lapply(dat_lst, function(x) x[rowMeans(x) > 1,])
mod  <- lapply(dds_string, function(x) model.matrix(~ Diet + PO_cat, colData(x)))
mod0 <- lapply(dds_string, function(x) model.matrix(~   1, colData(x)))
svseq <- sapply(1:length(dat_lst), function(x) svaseq(dat_lst[[x]], mod[[x]], mod0[[x]], n.sv = 2), simplify=F)
names(svseq) = names(dat_lst)
#ddssva <- dds_string
ressva_PO=list()
for(r in names(ddssva)){
ddssva[[r]]$SV1 <- svseq[[r]]$sv[,1]
ddssva[[r]]$SV2 <- svseq[[r]]$sv[,2]
design(ddssva[[r]]) <- ~ SV1 + Diet + PO_cat
ddssva[[r]] = DESeq(ddssva[[r]])
ressva_PO[[r]] = results(ddssva[[r]], contrast=c("PO_cat","a","b"))
}
pdf(file.path(dir,"figures_and_updates/raw_pvalues_string_SV1_PO.pdf"))
sapply(1:length(rem_seg_res$res_PO), function(x)
hist(rem_seg_res$res_PO[[x]]$pval_raw, main=paste("Histogram of p-values in", names(rem_seg_res$res_PO)[x])))
dev.off()
pdf(file.path(dir,"figures_and_updates/pval_fdrtool.pdf"))
for(r in names(res_PO)){
#[[paste0("rix",r)]] <- res))
res = res_PO[[r]]
res = res[-which(is.na(res$pvalue)),]
fdr <- fdrtool(res$stat, statistic="normal", plot=F)#, cutoff.method = "locfdr")
#fdr <- fdrtool(res$pvalue, statistic="pvalue")#, cutoff.method = "locfdr")
res[,"pval_tool"] = fdr$pval
res[,"padj_tool"]  <- p.adjust(res$pval_tool, method = "BH")
par(mfrow=c(2,1))
hist(res[,"pval_tool"], main = paste("P-values with estimated null model parameters",r), xlab="p",
sub=paste(paste(colnames(fdr$param), round(fdr$param,3), sep=":"), collapse=", "),
cex.main=0.9, cex.sub=0.7)
hist(res[,"padj_tool"], main = paste("Adj P-values with estimated null model parameters",r), xlab="p",
sub=paste(paste(colnames(fdr$param), round(fdr$param,3), sep=":"), collapse=", "),
cex.main=0.9, cex.sub=0.7)
length(which(res$padj_tool < 0.05))
res_PO[[r]] = res
}
dev.off()
min(fdr$qval)
min(fdr$lfdr)
lapply(fdr, head)
cut = fndr.cutoff(res$pvalue, statistic="pvalue")
cut=seq(0, 1, by=0.05)
lapply(cut, function(x) censored.fit(res$pvalue, x, statistic="pvalue"))
hist(fdr$pval)
plotMA(res)
r="1"
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_bw() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p[[r]]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],3),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_bw() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
for(n in plot_genes){
if(forest){
f = forest(meta_out_reml_abs[[n]],
main=paste("Meta-analysis across RIX for",n),
slab=toupper(levels(rma_test$rix)))
}
p=list()
for(r in names(dds_lst)){
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_bw() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
print(quad)
#print(p)
}
n
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
head(rownames(dds_lst$`1`))
for(n in plot_genes){
if(n %in% rownames(dds_lst$`1`)){
if(forest){
f = forest(meta_out_reml_abs[[n]],
main=paste("Meta-analysis across RIX for",n),
slab=toupper(levels(rma_test$rix)))
}
p=list()
for(r in names(dds_lst)){
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_bw() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
print(quad)
#print(p)
}
}
plot_genes
n
n %in% rownames(dds_lst$`1`)
n %in% rownames(dds_lst$`2`)
if(n %in% rownames(dds_lst$`2`)){
if(forest){
f = forest(meta_out_reml_abs[[n]],
main=paste("Meta-analysis across RIX for",n),
slab=toupper(levels(rma_test$rix)))
}
p=list()
for(r in names(dds_lst)){
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_bw() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
print(quad)
#print(p)
}
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_classic() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p[[r]]
p=list()
for(r in names(dds_lst)){
if(n %in% rownames(dds_lst[[r]])){
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_classic() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else {
p[[r]] = NULL
}
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
quad
n
p=list()
for(r in names(dds_lst)){
if(n %in% rownames(dds_lst[[r]])){
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_classic() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else {
p[[r]] = NA
}
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
print(quad)
p[[r]]
p[[r]] = ggplot(NA)
p[[r]] = ggplot(data.frame(NA))
p=list()
for(r in names(dds_lst)){
if(n %in% rownames(dds_lst[[r]])){
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_classic() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else {
p[[r]] = ggplot(data.frame(NA))
}
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
print(quad)
pdf(file.path(dir,"figures_and_updates/vdd_std_select_genes_30dec2019.pdf"))
forest=F
for(n in plot_genes){
if(forest){
f = forest(meta_out_reml_abs[[n]],
main=paste("Meta-analysis across RIX for",n),
slab=toupper(levels(rma_test$rix)))
}
p=list()
for(r in names(dds_lst)){
if(n %in% rownames(dds_lst[[r]])){
pd = plotCounts(dds_lst[[r]], gene=n, intgroup = "Diet",returnData = T)
pd$Diet = diet_leg$to[match(pd$Diet, diet_leg$from)]
pval = ifelse(n %in% rownames(rem_seg_res$res_diet[[r]]$Standard),
round(rem_seg_res$res_diet[[r]]$Standard$padj[which(rownames(rem_seg_res$res_diet[[r]]$Standard) == n)],4),
"NA")
p[[r]] = ggplot(pd, aes(x=Diet, y=count)) +
geom_boxplot(outlier.shape = NA) +# geom_point() +
geom_jitter(width = 0.2, col="blue") +
ggtitle(label = paste("RIX", toupper(r)),
subtitle = paste("st vs vd p-val:", pval)) +
theme_classic() + facet_grid() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
} else {
p[[r]] = ggplot(data.frame(NA))
}
}
quad = grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],
p[[6]],p[[7]],p[[8]],p[[9]], ncol=3, nrow=3,
top=paste("Normalized counts of",n))
print(quad)
#print(p)
}
dev.off()
